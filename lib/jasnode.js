// This file is autogenerated by jasnode
// It was inspired by node-jasmine (c) 2010 Adam Abrons and Misko Hevery http://getangular.com
// Copyright (c) 2010 Cory Ondrejka. All rights reserved.
// See MIT.LICENSE for licensing details.

var fs = require('fs');
var sys = require('sys');

var filename = '/Users/cory/src/jasnode/lib/jasnode/../../jasmine/lib/jasmine-0.10.2.js';
var src = fs.readFileSync(filename);

// give jasmine values to bind
global.window = {
    setTimeout: setTimeout,
    clearTimeout: clearTimeout,
    setInterval: setInterval,
    clearInterval: clearInterval
};

var jasmine = process.compile(src + '\njasmine;', filename);

delete global.window;

jasmine.run_specs = function() {
  var log = [];
  var columnCounter = 0;
  var verbose = true;
  
  // process in specs collected by jasnode
  process.compile(fs.readFileSync('/Users/cory/src/jasnode/jasmine/examples/ruby/spec/example/example_spec.js'), '/Users/cory/src/jasnode/jasmine/examples/ruby/spec/example/example_spec.js');
  process.compile(fs.readFileSync('/Users/cory/src/jasnode/spec/jasnode/spectest/spec/server/server_spec.js'), '/Users/cory/src/jasnode/spec/jasnode/spectest/spec/server/server_spec.js');
  process.compile(fs.readFileSync('/Users/cory/src/jasnode/templates/spec/server/server_spec.js'), '/Users/cory/src/jasnode/templates/spec/server/server_spec.js');
  process.compile(fs.readFileSync('/Users/cory/src/jasnode/spec/jasnode/spectest/spec/spec.js'), '/Users/cory/src/jasnode/spec/jasnode/spectest/spec/spec.js');
  process.compile(fs.readFileSync('/Users/cory/src/jasnode/templates/spec/spec.js'), '/Users/cory/src/jasnode/templates/spec/spec.js');
  process.compile(fs.readFileSync('/Users/cory/src/jasnode/spec/jasnode/spectest/spec/server/spec_server.js'), '/Users/cory/src/jasnode/spec/jasnode/spectest/spec/server/spec_server.js');
  process.compile(fs.readFileSync('/Users/cory/src/jasnode/templates/spec/server/spec_server.js'), '/Users/cory/src/jasnode/templates/spec/server/spec_server.js');

  
  // override jasmine reporter base class
  var jasmineEnv = jasmine.getEnv();
  jasmineEnv.reporter = {
    log: function(str){
    },

    reportRunnerStarting: function(runner) {
      date = new Date();
      sys.puts('Starting spec run at ' + date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds());
      start = date.getTime();
    },

    reportSuiteResults: function(suite) {
      var spec_results = suite.results();
      var path = [];
      while(suite) {
        path.unshift(suite.description);
        suite = suite.parentSuite;
      }
      var description = path.join(' -> ');

      spec_results.items_.forEach(function(spec){
        if (spec.failedCount > 0 && spec.description) {
          log.push(description + '\n');
          log.push(' it ' + spec.description + '\n');
          spec.items_.forEach(function(result){
            log.push(' ' + result.trace.stack + '\n');
          });
        }
      });
    },

    reportSpecResults: function(spec) {
      sys.print(spec.results().failedCount ? "F" : ".");
      if (columnCounter++ < 50) return;
      columnCounter = 0;
      sys.print('\n');
    },

    reportRunnerResults: function(runner) {
      elapsed = (Number(new Date) - start) / 1000;
      sys.puts('\n');
      if (verbose)
        log.forEach(function(log){ sys.puts(log); });
        
      sys.puts('\n');
      sys.puts('Finished in ' + elapsed + ' seconds');
      sys.puts(jasmine.results(runner));
      process.exit(runner.results().failedCount);
    }
  };
  jasmineEnv.execute();
};

// print out the results
jasmine.results = function(runner){
  var results = runner.results();
  var suites = runner.suites();
  var msg = '';
  msg += "\033[1m" + results.totalCount + ' example' + ((results.totalCount === 1) ? '' : 's') + '\033[22m, ';
  if (0 == results.failedCount)
    msg += "\033[32m" + results.failedCount + ' failure' + ((results.failedCount === 1) ? '' : 's') + '\033[39m\n';
  else
    msg += "\033[31m" + results.failedCount + ' failure' + ((results.failedCount === 1) ? '' : 's') + '\033[39m\n';
  return msg;
};

// create a busy wait to allow for async testing
jasmine.async_spec_wait = function() {
  var wait = jasmine.async_spec_wait;
  wait.start = new Date().getTime();
  wait.done = false;
  (function inner_wait(){
    waits(10);
    runs(function() {
      if (wait.start + wait.timeout < new Date().getTime()) {
        expect('timeout waiting for spec').toBeNull();
      } else if (wait.done) {
        wait.done = false;
      } else {
        inner_wait();
      }
    });
  })();  
};

// timeout after 10 seconds of waiting
jasmine.async_spec_wait.timeout = 10 * 1000;

jasmine.async_spec_done = function() {
  jasmine.async_spec_wait.done = true;
};

// make sure all the jasmine methods are available
for ( var key in jasmine) {
  exports[key] = jasmine[key];
}
