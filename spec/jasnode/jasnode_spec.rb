require File.join(File.dirname(__FILE__), "..", "spec_helper")
require "ftools"
 
describe Jasnode::Spec do
  before(:each) do
    template_base = File.expand_path(File.join(File.dirname(__FILE__), '..', "..", 'templates'))
    @name = File.expand_path(File.join(File.dirname(__FILE__), "spectest"))
    File.makedirs("#{@name}")
    FileUtils.cp_r("#{template_base}/.", @name)
  end
  
  it "should find all the javascript spec files" do
    specs = Jasnode::Spec.find_specs(@name)
    specs[0].find("spec/server/server_spec.js").should_not == nil
    specs[1].find("spec/jasnode/spectest/spec/spec.js").should_not == nil
    specs[2].find("spec/jasnode/spectest/spec/server/spec_server.js").should_not == nil
  end
  
  it "should find the current jasmine lib" do
    Jasnode::Spec.find_jasmine[0].find("jasmine/lib/jasmine").should_not == nil
  end
  
  it "should correctly generate the text to build a jasmine runner" do
    contents = Jasnode::Spec.build_jasmine_test_file(Jasnode::Spec.find_jasmine, Jasnode::Spec.find_specs(@name), true)
    contents.find("// This file is autogenerated by jasnode").should_not == nil
  end
  
  it "should save the jasmine runner into the appropriate locations" do
    File.open(File.join(@name,"lib", "jasnode.js"), "w") {|f| f.write(Jasnode::Spec.build_jasmine_test_file(Jasnode::Spec.find_jasmine, Jasnode::Spec.find_specs(@name), true)) }
    File.exist?("#{@name}/lib/jasnode.js").should == true
  end

  it "should handle the command line" do
    Dir.chdir(@name)
    output = %x[../../../bin/jasnode spec]
    output = output.split("\n")
    output[-1].should == "\e[1m12 examples\e[22m, \e[32m0 failures\e[39m"
    Dir.chdir("..")
  end

  after(:each) do
    FileUtils.rm_rf(@name)
  end
end